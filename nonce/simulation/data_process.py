import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.colors import LinearSegmentedColormap
from config_set import *

# Function to calculate b0_bucket and b3_bucket
def calculate_buckets(df):
    df['b0_bucket'] = df['Nonce'].apply(lambda x: (x >> 25) & 0x7F)  # First 7 bits of b0
    df['b3_bucket'] = df['Nonce'].apply(lambda x: x >> 1 & 0x7F)  # Last 7 bits of b3
    return df

# Function to compute b0_pattern and b3_pattern for each ASIC
def compute_patterns(df):
    b0_pattern = df.groupby('ASIC')['b0_bucket'].value_counts(normalize=True).unstack(fill_value=0).transpose()
    b3_pattern = df.groupby('ASIC')['b3_bucket'].value_counts(normalize=True).unstack(fill_value=0).transpose()

    b0_pattern = b0_pattern.reindex(index=reversed(b0_pattern.index), columns=ASIC_NAMES)
    b3_pattern = b3_pattern.reindex(index=reversed(b3_pattern.index), columns=ASIC_NAMES)
    return b0_pattern, b3_pattern

# Function to calculate the number of nonces generated by each ASIC each month
def calculate_monthly_nonce_counts(df):
    monthly_nonce_counts = df.groupby(['ASIC', 'Year', 'Month']).size()
    return monthly_nonce_counts

# Function to visualize patterns
def visualize_patterns(patterns, title):
    plt.figure(figsize=(10, 6))
    colors = [(0, 0, 0), (0, 1, 1)]  # Black to Red

    # Create the custom colormap
    cmap = LinearSegmentedColormap.from_list("black_to_red", colors)

    # Plot the heatmap with the custom colormap, swapping x and y axes
    sns.heatmap(patterns, cmap=cmap, fmt="", xticklabels=True, yticklabels=True)

    # Set labels and title
    plt.title(title)
    plt.xlabel('ASIC')  # Previously 'Bucket'
    plt.ylabel('Bucket')  # Previously 'ASIC'
    plt.show()

# Function to visualize monthly nonce counts
def visualize_monthly_nonce_counts(monthly_nonce_counts):
    # Combine year and month into a single variable
    monthly_nonce_counts['Year_Month'] = monthly_nonce_counts['Year'] + (monthly_nonce_counts['Month'] + 1) / 12

    # Plot the proportion of nonces generated by each ASIC over time using a line graph
    plt.figure(figsize=(12, 6))
    sns.lineplot(data=monthly_nonce_counts, x='Year_Month', y='Proportion', hue='ASIC', palette='tab10', marker='o')
    plt.title('Proportion of Nonces Generated by Each ASIC Over Time')
    plt.xlabel('Year and Month')
    plt.ylabel('Proportion of Nonces')
    plt.legend(title='ASIC', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

def compute_nonce_proportion(df):
    monthly_nonce_counts = df.groupby(['ASIC', 'Year', 'Month']).size().reset_index(name='Count')

    # Calculate the total number of nonces generated by all ASICs each month
    total_nonces_per_month = monthly_nonce_counts.groupby(['Year', 'Month'])['Count'].sum()

    # Normalize the counts by dividing each count by the total number of nonces for that month
    monthly_nonce_counts['Proportion'] = monthly_nonce_counts.apply(lambda row: row['Count'] / total_nonces_per_month[(row['Year'], row['Month'])], axis=1)
    return monthly_nonce_counts

if __name__ == "__main__":
    # Read the Excel file into a DataFrame
    df = pd.read_excel("simulated.xlsx")

    # Step 1: Calculate buckets
    df = calculate_buckets(df)

    # Step 2: Compute patterns
    b0_pattern, b3_pattern = compute_patterns(df)

    # Step 4: Visualize patterns
    visualize_patterns(b0_pattern, title='B0 Pattern Distribution')
    visualize_patterns(b3_pattern, title='B3 Pattern Distribution')

    # Calculate the total number of nonces each ASIC generates each month
    monthly_nonce_counts = compute_nonce_proportion(df)

    # Step 4: Visualize nonce proportion
    visualize_monthly_nonce_counts(monthly_nonce_counts)